abline(v=c(0.03, 0.06), col=cols, lwd=2, lty=2)
?sim.rateshift.taxa
mcmc_tree1
#Speciation rates
lambda_chosen <- c(0.03,0.02)
#Extintion rates
mu_chosen <- c(0.1,0.05)
#Simulate two trees
num_simulations <- 2
#Simulate tress of 100 tips
num_taxa <- 100
#Survival in mass extinction
survival_chosen <- c(1,0.2)
time_chosen <- c(0,0.3)
res <- sim.rateshift.taxa(n = num_taxa,
numbsim =  num_simulations,
lambda = lambda_chosen,
mu = mu_chosen,
frac = survival_chosen,
times = time_chosen,
complete = FALSE
)
res <- sim.rateshift.taxa(n = num_taxa,
numbsim =  num_simulations,
lambda = lambda_chosen,
mu = mu_chosen,
frac = survival_chosen,
times = time_chosen,
complete = FALSE
)
#Speciation rates
lambda_chosen <- c(0.03,0.02)
#Extintion rates
mu_chosen <- c(0,0)
#Simulate two trees
num_simulations <- 2
#Simulate tress of 100 tips
num_taxa <- 100
#Survival in mass extinction
survival_chosen <- c(1,0.2)
time_chosen <- c(0,0.3)
#Speciation rates
lambda_chosen <- c(1.5,0.5)
#Extintion rates
mu_chosen <- c(0,0.1)
#Simulate two trees
num_simulations <- 2
#Simulate tress of 100 tips
num_taxa <- 100
#Survival in mass extinction
survival_chosen <- c(1,0.4)
time_chosen <- c(0,0.3)
res <- sim.rateshift.taxa(n = num_taxa,
numbsim =  num_simulations,
lambda = lambda_chosen,
mu = mu_chosen,
frac = survival_chosen,
times = time_chosen,
complete = FALSE
)
#This output a tree from which we can  apply our birth rate function
res[[1]] %>% plot
res
res <- sim.rateshift.taxa(n = num_taxa,
numbsim =  num_simulations,
lambda = lambda_chosen,
mu = mu_chosen,
frac = survival_chosen,
times = time_chosen,
complete = FALSE
)
#This output a tree from which we can  apply our birth rate function
res[[1]] %>% plot
#Mcmc
tree.bd.1 <- make.bd(tree = res[[1]])
dev.off()
#This output a tree from which we can  apply our birth rate function
res[[1]] %>% plot
#Mcmc
tree.bd.1 <- make.bd(tree = res[[1]])
tree.bd.1
res[[1]]
res[[1]] %>% plot
#First we need to define a likelihood function
?make.bd.t
#First we need to define a likelihood function
make.bd.t(tree = res[[1]])
#First we need to define a likelihood function
make.bd.t(tree = res[[1]],functions = c("linear.t","linear.t"))
#First we need to define a likelihood function
likfunction <- make.bd.t(tree = res[[1]],functions = c("linear.t","linear.t"))
#First we need to define a likelihood function
likfunction.1 <- make.bd.t(tree = res[[1]],functions = c("linear.t","linear.t"))
#First we need to define a likelihood function
likfunction.1 <- make.bd.t(tree = res[[1]],functions = c("linear.t","linear.t"))
likfunction.2 <- make.bd.t(tree = res[[2]],functions = c("linear.t","linear.t"))
#First we need to define a likelihood function
likfunction.1 <- make.bd.t(tree = res[[1]],functions = c("linear.t","linear.t"))
likfunction.2 <- make.bd.t(tree = res[[2]],functions = c("linear.t","linear.t"))
#Montecarlo sampling
mcmc_tree1 <- mcmc(likfunction.1,c(0.1,0.1,0.2,0.2), w=0.1, nsteps=5000, print.every=100)
#Plots
cols <- c("red", "green")
par(mfrow=c(3,1), mar=c(5,4,0,1))
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'lambda'], "tree2_lambda"=mcmc_tree2[,'lambda']), col.line=cols, legend="topright")
head(mcmc_tree1)
mcmc_tree1$lambda.c
mcmc_tree1$lambda.c %>% hist
mcmc_tree1$lambda.c %>% mean
mcmc_tree1$lambda.m %>% mean
mcmc_tree1$mu.c %>% hist()
mcmc_tree1$mu.c %>% mean
mcmc_tree1$mu.m %>% mean
?mcmc
rm(list=ls())
library(diversitree)
library(TreeSim)
library(magrittr)
# 6. CHALLENGE PROBLEM
# use TreeSim::sim.rateshift.taxa to simulate data where the parameter(s) change
#   as a function of time AND where there is partial sampling.
# with the simulated data, investigate how well the posterior estimates using mcmc
#   recover the originalvalues for lamba (and possibly mu) used in the simulations
# you have freedom to pick the parameters you wish to investigate
#   you need not go beyond the methods from today's lab for displaying,
#   comparing and interpreting the results
# upload your R code and a short (1 or possibly 2 pg) writeup
#   include: a statement of the question or hypothesis, your choice of parameters to
#   simulate and test, your results, and a brief interpretation
#   the writeup can be separate from the R code or within one markup document
#Speciation rates
lambda_chosen <- c(1.5,0.5)
#Extintion rates
mu_chosen <- c(0,0.1)
#Simulate two trees
num_simulations <- 2
#Simulate tress of 100 tips
num_taxa <- 100
#Survival in mass extinction
survival_chosen <- c(1,0.4)
time_chosen <- c(0,0.3)
# Simulating 2 trees with 100 number of species having shifts in rate
# and mass extinction events.
# Between today and time 0.3 in the past, we have speciation rate 1,
# extinction rate 0. At time 0.3, we have a mass extinction event which
# 40% of the species survive. Prior to 0.3, we have a speciation rate
# of 0.6 and an extinction rate of 0.1:
res <- sim.rateshift.taxa(n = num_taxa,
numbsim =  num_simulations,
lambda = lambda_chosen,
mu = mu_chosen,
frac = survival_chosen,
times = time_chosen,
complete = FALSE
)
#This output a tree from which we can  apply our birth rate function
res[[1]] %>% plot
dev.off()
#First we need to define a likelihood function
likfunction.1 <- make.bd.t(tree = res[[1]],functions = c("linear.t","linear.t"))
likfunction.2 <- make.bd.t(tree = res[[2]],functions = c("linear.t","linear.t"))
#Montecarlo sampling
mcmc_tree1 <- mcmc(likfunction.1,c(0.5,0.1,0.2,0.2), w=0.1, nsteps=5000, print.every=100)
mcmc_tree2 <- mcmc(likfunction.2,c(0.5,0.1,0.2,0.2), w=0.1, nsteps=5000, print.every=100)
head(mcmc_tree1)
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'lambda.c'], "tree2_lambda"=mcmc_tree2[,'lambda.c']), col.line=cols, legend="topright")
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'lambda.c'], "tree2_lambda"=mcmc_tree2[,'lambda.c']), col.line=cols, legend="topright")
mcmc_tree1
mcmc_tree1[,1]
mcmc_tree1[,'lambda.c']
mcmc_tree2[,'lambda.c']
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'lambda.c'],
"tree2_lambda"=mcmc_tree2[,'lambda.c']), col.line=cols, legend="topright")
#Plots
cols <- c("red", "green")
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'lambda.c'],
"tree2_lambda"=mcmc_tree2[,'lambda.c']), col.line=cols, legend="topright")
# we add vertical lines to show the values of the original simulation parameters
#   how close are these to the center of the posterior distributions?
abline(v=c(1.5, 1.5), col=cols, lwd=2, lty=2)
# now let's plot the estimated posterior distributions for mu
#   remember that the original simulation value was mu=0 for both trees
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'lambda.m'], "tree2_lambda"=mcmc_tree2[,'lambda.m']), col.line=cols, legend="topright")
abline(v=c(0.5, 0.5), col=cols, lwd=2, lty=2)
#
profiles.plot(cbind("tree1_lambda"=mcmc_tree1[,'mu.c'],
"tree2_lambda"=mcmc_tree2[,'mu.c']), col.line=cols, legend="topright")
#Plots
cols <- c("red", "green")
par(mfrow=c(4,1), mar=c(5,4,0,1))
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda.c"=mcmc_tree1[,'lambda.c'],
"tree2_lambda.c"=mcmc_tree2[,'lambda.c']), col.line=cols, legend="topright")
# we add vertical lines to show the values of the original simulation parameters
#   how close are these to the center of the posterior distributions?
abline(v=c(1.5, 1.5), col=cols, lwd=2, lty=2)
# now let's plot the estimated posterior distributions for mu
#   remember that the original simulation value was mu=0 for both trees
profiles.plot(cbind("tree1_lambda.m"=mcmc_tree1[,'lambda.m'], "tree2_lambda.m"=mcmc_tree2[,'lambda.m']), col.line=cols, legend="topright")
abline(v=c(0.5, 0.5), col=cols, lwd=2, lty=2)
#
profiles.plot(cbind("tree1_mu.c"=mcmc_tree1[,'mu.c'],
"tree2_mu.c"=mcmc_tree2[,'mu.c']), col.line=cols, legend="topright")
profiles.plot(cbind("tree1_mu.m"=mcmc_tree1[,'mu.m'],
"tree2_mu.m"=mcmc_tree2[,'mu.m']), col.line=cols, legend="topright")
# we add vertical lines to show the values of the original simulation parameters
#   how close are these to the center of the posterior distributions?
abline(v=c(1.5, 1.5), col=cols, lwd=2, lty=2)
#Plots
cols <- c("red", "green")
par(mfrow=c(4,1), mar=c(5,4,0,1))
# first plot the estimated posterior distributions for lamba
profiles.plot(cbind("tree1_lambda.c"=mcmc_tree1[,'lambda.c'],
"tree2_lambda.c"=mcmc_tree2[,'lambda.c']), col.line=cols, legend="topright")
# we add vertical lines to show the values of the original simulation parameters
#   how close are these to the center of the posterior distributions?
abline(v=c(1.5, 1.5), col=cols, lwd=2, lty=2)
# now let's plot the estimated posterior distributions for mu
#   remember that the original simulation value was mu=0 for both trees
profiles.plot(cbind("tree1_lambda.m"=mcmc_tree1[,'lambda.m'], "tree2_lambda.m"=mcmc_tree2[,'lambda.m']), col.line=cols, legend="topright")
abline(v=c(0.5, 0.5), col=cols, lwd=2, lty=2)
#
profiles.plot(cbind("tree1_mu.c"=mcmc_tree1[,'mu.c'],
"tree2_mu.c"=mcmc_tree2[,'mu.c']), col.line=cols, legend="topright")
abline(v=c(0, 0), col=cols, lwd=2, lty=2)
profiles.plot(cbind("tree1_mu.m"=mcmc_tree1[,'mu.m'],
"tree2_mu.m"=mcmc_tree2[,'mu.m']), col.line=cols, legend="topright")
abline(v=c(0.1, 0.1), col=cols, lwd=2, lty=2)
library(ohchibi)
library(DESeq2)
library(paletteer)
library(palettesPM)
library(scales)
library(UpSetR)
setwd('/home/isai/Documents/results/hallepi/revision_plosbiology/scripts/')
set.seed(seed = 130816)
#Load dataset
Dat_dds <- readRDS(file = "../cleandata/dds_deseq2_hallepi_amplicon_fungi_asvs_groupsgenotypephosphate.RDS")
dds <- Dat_dds$Root$ASV
pval_thres <- 0.1
########## Determine ASVs that requiere PSR #############
###### Pi effect inside each genotype ######
res_inside_col0 <- results(object = dds,contrast = c("group","Col_0_low_Pi","Col_0_low"))
res_inside_phf1 <- results(object = dds,contrast = c("group","phf1_low_Pi","phf1_low"))
res_inside_phr1phl1 <- results(object = dds,contrast = c("group","phr1_phl1_low_Pi","phr1_phl1_low"))
wt <- res_inside_col0 %>% subset(padj < pval_thres & log2FoldChange < 0) %>% rownames
single <- res_inside_phf1 %>% subset(padj < pval_thres & log2FoldChange < 0) %>% rownames
double <- res_inside_phr1phl1 %>% subset(padj < pval_thres & log2FoldChange < 0) %>% rownames
lista <- list(wt = wt,single = single,double = double)
upset(data = fromList(lista))
#Rbidn results for dataset object
res_inside_col0$Genotype <- "Col-0"
res_inside_phf1$Genotype <- "phf1"
res_inside_phr1phl1$Genotype <- "phr1/phl1"
towrite <- rbind(res_inside_col0,res_inside_phf1,res_inside_phr1phl1) %>% as.data.frame
rm(list=ls())
setwd('/home/isai/Documents/results/github/hallepi/scripts/')
library(ohchibi)
library(DESeq2)
library(paletteer)
library(palettesPM)
library(scales)
library(UpSetR)
set.seed(seed = 130816)
#Load dataset
Dat_dds <- readRDS(file = "../cleandata/dds_deseq2_hallepi_amplicon_fungi_asvs_groupsgenotypephosphate.RDS")
dds <- Dat_dds$Root$ASV
pval_thres <- 0.1
########## Determine ASVs that requiere PSR #############
###### Pi effect inside each genotype ######
res_inside_col0 <- results(object = dds,contrast = c("group","Col_0_low_Pi","Col_0_low"))
res_inside_phf1 <- results(object = dds,contrast = c("group","phf1_low_Pi","phf1_low"))
res_inside_phr1phl1 <- results(object = dds,contrast = c("group","phr1_phl1_low_Pi","phr1_phl1_low"))
#Rbidn results for dataset object
res_inside_col0$Genotype <- "Col-0"
res_inside_phf1$Genotype <- "phf1"
res_inside_phr1phl1$Genotype <- "phr1/phl1"
towrite <- rbind(res_inside_col0,res_inside_phf1,res_inside_phr1phl1) %>% as.data.frame
rm(list=ls())
dev.off()
library(ohchibi)
library(palettesPM)
library(paletteer)
library(DESeq2)
library(emmeans)
set.seed(130816)
size_legend_text <- 45
size_axis_title <- 35
size_legend_title <- 55
legend_proportion_size <- 4
Dat_ori <- readRDS("../cleandata/dat_hallepi_syncom_piDO_useq97.RDS")
#Plot abundance of burkholderia
Dat_rab <- Dat_ori$RelativeAbundance
Dat_rab <- Dat_rab %>% subset.Dataset(Fraction == "Root" & SynCom == "Full" ,drop = T,clean = T)
melted <- Dat_rab$Tab %>% melt
colnames(melted) <- c("Id","ID_Matrix","RA")
melted <- merge(melted,Dat_rab$Map, by = "ID_Matrix")
melted_sub <- which(melted$Id %in% c("Sequence_16","Sequence_30")) %>%
melted[.,] %>% droplevels
df_sub <- aggregate(RA~ID_Matrix,data = melted_sub,sum)
df_sub <- merge(df_sub,Dat_rab$Map, by = "ID_Matrix", all.x = TRUE)
p <- df_sub %>% subset(RA < 0.1) %>%
chibi.boxplot(Map = .,x_val = "Pi",y_val = "RA",
style = "open",
facet_formula = "Genotype",size_median = 2,
size_point = 0,stroke_point = 0,size_axis_text.y = 35,
size_axis_text.x = 30,median_color = "red",
size_axis_title.y = 40,strip_text_size = 30,
size_legend_text = 30,legend_proportion_size = 4) +
scale_shape_manual(values = 21:22) + ylab(label = "Phosphate") +
xlab(label = "Syncom") +
geom_sina(alpha = 0.15, color = "#414141",
stroke = 0,size = 4) +
#geom_text(data = Res_em,
#          aes(x = Syncom,y = 0.03,label = Letters),
#          inherit.aes = F,size = 7.5,family ="Arial") +
coord_cartesian(expand = TRUE) +
theme(
axis.text.x = element_text(angle = 90,vjust = 0.5,hjust = 1,family = "Arial",face = "bold"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 25,family = "Arial",face = "bold")
)   +
ylab(label = "Relative abundance in root")
p
#Save dataset
write.table(x = df_sub,file = "../data_figures/data_Fig6C.csv",
append = F,quote = F,sep = ",",row.names = F,col.names = T)
head(df_sub)
rm(list=ls())
dev.off()
library(ohchibi)
library(palettesPM)
library(paletteer)
library(extrafont)
loadfonts(device = "pdf")
library(egg)
library(harrietr)
#Set random seed
set.seed(130816)
size_legend_text <- 45
size_axis_title <- 35
size_legend_title <- 55
legend_proportion_size <- 4
source('plotting_parameters_hallepi.R')
#Read bacterial otus dat
Dat <- readRDS(file = "../cleandata/dat_hallepi_amplicon_fungi_asvs_soil.2019.RDS")
Dat_rar <- Dat$Rarefied
#Determine not problematic pots
Map <- Dat_rar$Map
Map$Count <- rep(1,nrow(Map))
df_freq <- acast(data = Map,formula = Pot~Fraction,fun.aggregate = sum,
value.var = "Count")
res <- apply(X = df_freq,MARGIN = 1,
FUN = function(x)which(x>1)%>% length)
noms <- which(res == 1) %>% names
Map <- Map[which(Map$Pot %in% noms),] %>% droplevels
samples_remove <- Map$DADA2_Header %>% as.character
Dat_rar <- remove_samples(Dat = Dat_rar,samples = samples_remove,droplevels = T)
#Remove bulksoil samples
Dat_root <- subset.Dataset(x = Dat_rar,Genotype!="No_Plant",drop = T,clean = T) %>%
subset.Dataset(x = ., Fraction == "Root",drop = T, clean =T)
Dat_soil <- subset.Dataset(x = Dat_rar,Genotype!="No_Plant",drop = T,clean = T) %>%
subset.Dataset(x = ., Fraction == "Soil",drop = T, clean =T)
Dat_shoot <- subset.Dataset(x = Dat_rar,Genotype!="No_Plant",drop = T,clean = T) %>%
subset.Dataset(x = ., Fraction == "Shoot",drop = T, clean =T)
#Determine share pots
pots_root <- Dat_root$Map$Pot %>% unique %>% as.character
pots_soil <- Dat_soil$Map$Pot %>% unique %>% as.character
pots_shoot <- Dat_shoot$Map$Pot %>% unique %>% as.character
int_root_shoot <- intersect(pots_root,pots_shoot)
int_all <- intersect(int_root_shoot,pots_soil)
# int_all <- read.table(file = "../rawdata/pots_otus_fungi.txt") %$% x %>%
#   as.character
# int_all <- int_all[-6]
#Root versus Shoot ###
samples_remove <- Dat_root$Map$DADA2_Header[which(!(Dat_root$Map$Pot %in% int_root_shoot))] %>%
as.character
Dat_root <- remove_samples(Dat = Dat_root,samples = samples_remove,droplevels = T)
samples_remove <- Dat_shoot$Map$DADA2_Header[which(!(Dat_shoot$Map$Pot %in% int_root_shoot))] %>%
as.character
Dat_shoot <- remove_samples(Dat = Dat_shoot,samples = samples_remove,droplevels = T)
#Order
Map_root <- Dat_root$Map
Map_shoot <- Dat_shoot$Map
Map_root <- match(int_root_shoot,Map_root$Pot) %>%
Map_root[.,]
Map_shoot <- match(int_root_shoot,Map_shoot$Pot) %>%
Map_shoot[.,]
Tab_root <- Dat_root$Tab
Tab_shoot <- Dat_shoot$Tab
Tab_root <- match(Map_root$DADA2_Header,colnames(Tab_root)) %>%
Tab_root[,.]
Tab_shoot <- match(Map_shoot$DADA2_Header,colnames(Tab_shoot)) %>%
Tab_shoot[,.]
#Define distfun to use
distfun <- function(x,method) vegan::vegdist(x = x, method = "bray")
dist_root <- distfun(x = Tab_root %>% t)
dist_shoot <- distfun(x = Tab_shoot %>% t)
m1 <- mantel(xdis = dist_root,ydis = dist_shoot,
permutations = 10000)
capture.output(file = "../figures/supfigure2_mantel_fungi_root_shoot.doc",
append = F,print(m1))
df1 <- melt_dist(dist = dist_root %>% as.matrix)
df2 <- melt_dist(dist = dist_shoot %>% as.matrix)
dfpval <- data.frame(r = m1$statistic %>% round(3) ,p = m1$signif %>% format.pval())
dfpval$label <- paste0("r= ",dfpval$r,"\npval=",dfpval$p)
melted <- data.frame(Root = df1$dist,Shoot = df2$dist)
mlm <- lm(dist_shoot~dist_root)
p <- ggplot(data = melted,aes(Root,Shoot)) + geom_point(shape = 21,,size = 5) +
theme_ohchibi() +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
) +
geom_abline(intercept = mlm$coefficients[1],slope = mlm$coefficients[2],color = "red",size = 1) +
geom_text(dfpval,mapping = aes(0.9,0.3,label =label),size = 5)
oh.save.pdf(p = p,outname = "mantel_fungi_root_shoot_big.pdf",outdir = "../figures/",width = 10,height = 10)
## Add soil
Map_root <- Dat_root$Map
Map_shoot <- Dat_shoot$Map
Map_soil <- Dat_soil$Map
Map_root <- match(int_all,Map_root$Pot) %>%
Map_root[.,]
Map_shoot <- match(int_all,Map_shoot$Pot) %>%
Map_shoot[.,]
Map_soil <- match(int_all,Map_soil$Pot) %>%
Map_soil[.,]
Tab_root <- Dat_root$Tab
Tab_shoot <- Dat_shoot$Tab
Tab_soil <- Dat_soil$Tab
Tab_root <- match(Map_root$DADA2_Header,colnames(Tab_root)) %>%
Tab_root[,.]
Tab_shoot <- match(Map_shoot$DADA2_Header,colnames(Tab_shoot)) %>%
Tab_shoot[,.]
Tab_soil <- match(Map_soil$DADA2_Header,colnames(Tab_soil)) %>%
Tab_soil[,.]
dist_root <- distfun(x = Tab_root %>% t)
dist_shoot <- distfun(x = Tab_shoot %>% t)
dist_soil <- distfun(x = Tab_soil %>% t)
m_root_shoot <- mantel(xdis = dist_root,ydis = dist_shoot,
permutations = 10000)
capture.output(file = "../figures/supfigure2_mantel_fungi_root_shoot_small.doc",
append = F,print(m_root_shoot))
df1 <- melt_dist(dist = dist_root %>% as.matrix)
df2 <- melt_dist(dist = dist_shoot %>% as.matrix)
dfpval <- data.frame(r = m_root_shoot$statistic %>% round(3) ,p = m_root_shoot$signif %>% format.pval())
dfpval$label <- paste0("r= ",dfpval$r,"\npval=",dfpval$p)
melted <- data.frame(Root = df1$dist,Shoot = df2$dist)
mlm <- lm(dist_shoot~dist_root)
p <- ggplot(data = melted,aes(Root,Shoot)) + geom_point(shape = 21,,size = 8) +
theme_ohchibi() +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
) +
geom_abline(intercept = mlm$coefficients[1],slope = mlm$coefficients[2],color = "red",size = 1) +
geom_text(dfpval,mapping = aes(0.9,0.3,label =label),size = 5)
oh.save.pdf(p = p,outname = "mantel_fungi_root_shoot_small.pdf",outdir = "../figures/",width = 10,height = 10)
m_root_soil <- mantel(xdis = dist_root,ydis = dist_soil,
permutations = 10000)
capture.output(file = "../figures/supfigure2_mantel_fungi_root_soil_small.doc",
append = F,print(m_root_soil))
df1 <- melt_dist(dist = dist_soil %>% as.matrix)
df2 <- melt_dist(dist = dist_root %>% as.matrix)
dfpval <- data.frame(r = m_root_soil$statistic %>% round(3) ,p = m_root_soil$signif %>% format.pval())
dfpval$label <- paste0("r= ",dfpval$r,"\npval=",dfpval$p)
melted <- data.frame(Soil = df1$dist,Root = df2$dist)
mlm <- lm(dist_root~dist_soil)
p <- ggplot(data = melted,aes(Soil,Root)) + geom_point(shape = 21,,size = 8) +
theme_ohchibi() +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
) +
geom_abline(intercept = mlm$coefficients[1],slope = mlm$coefficients[2],color = "red",size = 1) +
geom_text(dfpval,mapping = aes(0.7,0.4,label =label),size = 5)
oh.save.pdf(p = p,outname = "mantel_fungi_soil_root_small.pdf",outdir = "../figures/",width = 10,height = 10)
m_shoot_soil <- mantel(xdis = dist_shoot,ydis = dist_soil,
permutations = 10000)
capture.output(file = "../figures/supfigure2_mantel_fungi_shoot_soil_small.doc",
append = F,print(m_shoot_soil))
df1 <- melt_dist(dist = dist_soil %>% as.matrix)
df2 <- melt_dist(dist = dist_shoot %>% as.matrix)
dfpval <- data.frame(r = m_shoot_soil$statistic %>% round(3) ,p = m_shoot_soil$signif %>% format.pval())
dfpval$label <- paste0("r= ",dfpval$r,"\npval=",dfpval$p)
melted <- data.frame(Soil = df1$dist,Shoot = df2$dist)
mlm <- lm(dist_shoot~dist_soil)
p <- ggplot(data = melted,aes(Soil,Shoot)) + geom_point(shape = 21,,size = 8) +
theme_ohchibi() +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
) +
geom_abline(intercept = mlm$coefficients[1],slope = mlm$coefficients[2],color = "red",size = 1) +
geom_text(dfpval,mapping = aes(0.65,0.4,label =label),size = 5)
oh.save.pdf(p = p,outname = "mantel_fungi_soil_shoot_small.pdf",outdir = "../figures/",width = 10,height = 10)
## Write the mantel dataset ###
df1 <- melt_dist(dist = dist_soil %>% as.matrix)
df2 <- melt_dist(dist = dist_shoot %>% as.matrix)
df3 <- melt_dist(dist = dist_root %>% as.matrix)
melted <- data.frame(Soil = df1$dist,Root = df3$dist,Shoot = df2$dist)
#Write this dataset
write.table(x = melted,file = "../data_figures/data_S3DEF.csv",
append = F,quote = F,sep = ",",row.names = F,col.names = T)
